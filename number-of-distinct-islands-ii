#include<bits/stdc++.h>
using namespace std;

class Solution {
private:
    int delrow[8] = {-1, -1, -1, 0, 1, 1, 1, 0};
    int delcol[8] = {-1, 0, 1, 1, 1, 0, -1, -1};
    
    void dfs(vector<vector<char>>& grid, vector<vector<int>>& vis, int i, int j) {
        int n = grid.size();
        int m = grid[0].size();
        vis[i][j] = 1;
        
        for (int ii = 0; ii < 8; ii++) {
            int nrow = i + delrow[ii];
            int ncol = j + delcol[ii];
            
            if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && !vis[nrow][ncol] && grid[nrow][ncol] == '1') {
                dfs(grid, vis, nrow, ncol);
            }
        }
    }
    
public:
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        int cnt = 0;
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (!vis[i][j] && grid[i][j] == '1') {
                    dfs(grid, vis, i, j);
                    cnt++;
                }
            }
        }
        return cnt;
    }
};

int main() {
    vector<vector<char>> grid = {
        // {'0', '1', '1', '1', '0', '0', '0'},
        // {'0', '0', '1', '1', '0', '1', '0'}
        {'0', '1', '0' , '1'},
        {'0','1','1','0'},
        {'0','0','1','0'},
        {'0','0','0','0'},
        {'1','1','0','1'}
    };

    Solution obj;
    cout << obj.numIslands(grid) << endl;

    return 0;
}
